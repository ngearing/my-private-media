<?php

namespace MPM\Common;

class htaccess {

	/**
	 * Path to the file.
	 *
	 * @var str
	 */
	private $file;

	/**
	 * Fopen file resource.
	 *
	 * @var Resource
	 */
	private $handle;

	/**
	 * Create file.
	 *
	 * @param string $file Path to file.
	 */
	public function __construct( $file ) {
		$this->file = $file;

		try {

			// Create file if not exist.
			if ( ! file_exists( $this->file ) ) {
				if ( ! $this->handle = @fopen( $this->file, 'w' ) ) {
					throw new \Exception( 'Cannot create file' );
				}

				flock( $this->handle, LOCK_EX );
				fwrite(
					$this->handle,
					'# .htaccess generated by My Private Media ' . PHP_EOL
				);
				flock( $this->handle, LOCK_UN );
				fclose( $this->handle );
			}

			// check file is readable.
			if ( ! is_readable( $this->file ) ) {
				throw new \Exception( 'File is not readable' );
			}

			// check file is writable.
			if ( ! is_writable( $this->file ) ) {
				throw new \Exception( 'File is not writable' );
			}
		} catch ( \Exception $e ) {
			exit( 'Error: ' . $e->getMessage() );
		}
	}

	/**
	 * Create or update entry
	 *
	 * @param string $data The data to write.
	 * @param string $delim The delimiter.
	 * @return void
	 */
	public function create( $data = PHP_EOL, $delim = '#' ) {
		// first check for exsisting then update.
		if ( $this->read( $delim ) ) {
			$this->update( $data, $delim );
		} else // create new entry
		{
			$data = PHP_EOL . '# ' . $delim . PHP_EOL . $data . PHP_EOL . '# \\' . $delim;
			file_put_contents( $this->file, $data, FILE_APPEND );
		}
	}

	/**
	 * Read entry.
	 *
	 * @param string $delim Entry delimiter.
	 * @return mixed
	 */
	public function read( $delim = '#' ) {
		$file = file_get_contents( $this->file );

		$delim = preg_quote( $delim );
		if ( preg_match( "/#\s$delim\s(.*?)\s#\s\\\\$delim/s", $file, $matches ) ) {
			return trim( $matches[1] );
		} else {
			return false;
		}
	}

	/**
	 * Update entry.
	 *
	 * @param string $data Entry data.
	 * @param string $delim Entry delimiter.
	 * @return void
	 */
	public function update( $data = PHP_EOL, $delim = '#' ) {
		$data = str_replace(
			array( '$1', '$2', '$3', '$4', '$5' ),
			array( '\$1', '\$2', '\$3', '\$4', '\$5' ), $data
		);

			$delim = preg_quote( $delim );

		file_put_contents(
			$this->file,
			trim(
				preg_replace(
					"/#\s$delim\s(.*?)\s#\s\\\\$delim/s",
					'# ' . $delim . PHP_EOL . $data . PHP_EOL . '# \\' . $delim,
					file_get_contents( $this->file )
				)
			)
		);
	}

	/**
	 * Delete entry.
	 *
	 * @param string $delim The entry delimiter.
	 * @return bool
	 */
	public function delete( $delim = '#' ) {
		$file  = file_get_contents( $this->file );
		$delim = preg_quote( $delim );
		if ( preg_match( "/#\s$delim\s(.*?)\s#\s\\\\$delim/s", $file, $matches ) ) {
			file_put_contents(
				$this->file,
				str_replace( PHP_EOL . $matches[0] . PHP_EOL, '', $file )
			);
			return true;
		} else {
			return false;
		}
	}
}
